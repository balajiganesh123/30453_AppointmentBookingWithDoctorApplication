{"ast":null,"code":"import { ActivatedRoute } from '@angular/router';\nimport { FormBuilder } from '@angular/forms';\nimport { ApiService } from '../services/api.service';\nimport { forkJoin } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"../services/api.service\";\nimport * as i3 from \"@angular/forms\";\nimport * as i4 from \"@angular/common\";\nfunction DoctorProfileComponent_div_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 8);\n    i0.ɵɵtext(1, \"Loading...\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction DoctorProfileComponent_table_11_tr_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\")(1, \"td\", 12);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"td\", 12);\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const r_r5 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(r_r5.date);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(r_r5.time);\n  }\n}\nfunction DoctorProfileComponent_table_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"table\", 9)(1, \"thead\")(2, \"tr\")(3, \"th\", 10);\n    i0.ɵɵtext(4, \"Date\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"th\", 10);\n    i0.ɵɵtext(6, \"Slot Time\");\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(7, \"tbody\");\n    i0.ɵɵtemplate(8, DoctorProfileComponent_table_11_tr_8_Template, 5, 2, \"tr\", 11);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(8);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r1.allSlots);\n  }\n}\nfunction DoctorProfileComponent_div_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 8);\n    i0.ɵɵtext(1, \"No slots for selected date.\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction DoctorProfileComponent_div_13_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r8 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 13)(1, \"div\", 14)(2, \"div\")(3, \"div\", 15);\n    i0.ɵɵtext(4);\n    i0.ɵɵpipe(5, \"date\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"div\");\n    i0.ɵɵtext(7);\n    i0.ɵɵpipe(8, \"date\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(9, \"form\", 16);\n    i0.ɵɵlistener(\"ngSubmit\", function DoctorProfileComponent_div_13_Template_form_ngSubmit_9_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r8);\n      const s_r6 = restoredCtx.$implicit;\n      const ctx_r7 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r7.book(s_r6));\n    });\n    i0.ɵɵelement(10, \"input\", 17)(11, \"input\", 18);\n    i0.ɵɵelementStart(12, \"button\", 19);\n    i0.ɵɵtext(13);\n    i0.ɵɵelementEnd()()()();\n  }\n  if (rf & 2) {\n    const s_r6 = ctx.$implicit;\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind2(5, 5, s_r6.startUtc, \"mediumDate\"));\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind2(8, 8, s_r6.startUtc, \"shortTime\"));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"formGroup\", ctx_r3.fgs[s_r6.startUtc]);\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"disabled\", ctx_r3.submitting[s_r6.startUtc]);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r3.submitting[s_r6.startUtc] ? \"Booking...\" : \"Book\", \" \");\n  }\n}\nexport let DoctorProfileComponent = /*#__PURE__*/(() => {\n  class DoctorProfileComponent {\n    constructor(route, api, fb) {\n      this.route = route;\n      this.api = api;\n      this.fb = fb;\n      this.date = new Date().toISOString().slice(0, 10);\n      this.slots = [];\n      this.fgs = {};\n      this.doctorId = 0;\n      this.submitting = {};\n      this.allSlots = [];\n      this.loadingAll = false;\n      this.todayStr = new Date().toISOString().slice(0, 10);\n    }\n    ngOnInit() {\n      this.doctorId = Number(this.route.snapshot.paramMap.get('id'));\n      this.api.getDoctor(this.doctorId).subscribe(d => this.doctor = d);\n      if (this.date < this.todayStr) this.date = this.todayStr;\n      this.findSlots();\n    }\n    trackSlot(i, s) {\n      return s.startUtc;\n    }\n    extractUserId() {\n      const raw = localStorage.getItem('user');\n      if (!raw) return null;\n      let u;\n      try {\n        u = JSON.parse(raw);\n      } catch {\n        return null;\n      }\n      const tryVals = [u?.id, u?.user?.id, u?.userId, u?.uid, u?.payload?.id, u?.data?.id];\n      for (const v of tryVals) {\n        if (typeof v === 'number' && Number.isFinite(v)) return v;\n        if (typeof v === 'string' && v.trim() && !Number.isNaN(Number(v))) return Number(v);\n      }\n      const fallbackKeys = ['userId', 'uid', 'patientId', 'id'];\n      for (const k of fallbackKeys) {\n        const s = localStorage.getItem(k);\n        if (s && !Number.isNaN(Number(s))) return Number(s);\n      }\n      return null;\n    }\n    findSlots() {\n      if (this.date < this.todayStr) this.date = this.todayStr;\n      this.api.getSlots(this.doctorId, this.date).subscribe(arr => {\n        this.slots = arr;\n        const keep = new Set(arr.map(s => s.startUtc));\n        for (const s of arr) {\n          const k = s.startUtc;\n          if (!this.fgs[k]) this.fgs[k] = this.fb.group({\n            reason: [''],\n            notes: ['']\n          });\n        }\n        for (const k of Object.keys(this.fgs)) {\n          if (!keep.has(k)) delete this.fgs[k];\n        }\n      });\n    }\n    book(s) {\n      const patientId = this.extractUserId();\n      if (!patientId) {\n        alert('Please log in again.');\n        return;\n      }\n      const fg = this.fgs[s.startUtc];\n      if (!fg) {\n        this.findSlots();\n        return;\n      }\n      const payload = {\n        doctorId: this.doctorId,\n        patientId: patientId,\n        startUtc: s.startUtc,\n        reason: fg.value.reason || '',\n        notes: fg.value.notes || ''\n      };\n      this.submitting[s.startUtc] = true;\n      this.api.createAppointment(payload).subscribe({\n        next: () => {\n          fg.reset();\n          this.findSlots();\n          this.submitting[s.startUtc] = false;\n          alert('Appointment requested.');\n        },\n        error: () => {\n          this.findSlots();\n          this.submitting[s.startUtc] = false;\n          alert('That slot is no longer available.');\n        }\n      });\n    }\n    toLocalHm(isoUtc) {\n      const d = new Date(isoUtc);\n      return d.toLocaleTimeString([], {\n        hour: '2-digit',\n        minute: '2-digit',\n        hour12: false\n      });\n    }\n    loadAllAvailableSlots(days = 30) {\n      const base = new Date(this.date);\n      const dates = [];\n      for (let i = 0; i < days; i++) {\n        const d = new Date(base.getFullYear(), base.getMonth(), base.getDate() + i);\n        const y = d.getFullYear();\n        const m = String(d.getMonth() + 1).padStart(2, '0');\n        const dd = String(d.getDate()).padStart(2, '0');\n        dates.push(`${y}-${m}-${dd}`);\n      }\n      this.loadingAll = true;\n      const reqs = dates.map(dt => this.api.getSlots(this.doctorId, dt));\n      forkJoin(reqs).subscribe({\n        next: res => {\n          const rows = [];\n          res.forEach((arr, i) => {\n            const date = dates[i];\n            arr.forEach(s => rows.push({\n              date,\n              time: this.toLocalHm(s.startUtc)\n            }));\n          });\n          rows.sort((a, b) => a.date === b.date ? a.time.localeCompare(b.time) : a.date.localeCompare(b.date));\n          this.allSlots = rows;\n          this.loadingAll = false;\n        },\n        error: () => {\n          this.allSlots = [];\n          this.loadingAll = false;\n        }\n      });\n    }\n  }\n  DoctorProfileComponent.ɵfac = function DoctorProfileComponent_Factory(t) {\n    return new (t || DoctorProfileComponent)(i0.ɵɵdirectiveInject(i1.ActivatedRoute), i0.ɵɵdirectiveInject(i2.ApiService), i0.ɵɵdirectiveInject(i3.FormBuilder));\n  };\n  DoctorProfileComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: DoctorProfileComponent,\n    selectors: [[\"app-doctor-profile\"]],\n    decls: 14,\n    vars: 8,\n    consts: [[2, \"margin\", \"0 0 4px 0\"], [2, \"margin\", \"0 0 12px 0\", \"color\", \"#555\"], [2, \"display\", \"flex\", \"gap\", \"8px\", \"align-items\", \"center\", \"margin-bottom\", \"12px\", \"flex-wrap\", \"wrap\"], [\"type\", \"date\", 2, \"padding\", \"8px\", \"font-size\", \"14px\", 3, \"ngModel\", \"ngModelChange\"], [\"type\", \"button\", 1, \"btn\", \"btn-outline\", \"btn-sm\", 3, \"click\"], [\"style\", \"margin:8px 0;\", 4, \"ngIf\"], [\"style\", \"width:100%; border-collapse:collapse; margin-bottom:16px;\", 4, \"ngIf\"], [\"style\", \"border:1px solid #ddd; border-radius:8px; padding:10px; margin-bottom:8px;\", 4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [2, \"margin\", \"8px 0\"], [2, \"width\", \"100%\", \"border-collapse\", \"collapse\", \"margin-bottom\", \"16px\"], [2, \"text-align\", \"left\", \"border-bottom\", \"1px solid #ddd\", \"padding\", \"8px\"], [4, \"ngFor\", \"ngForOf\"], [2, \"border-bottom\", \"1px solid #eee\", \"padding\", \"8px\"], [2, \"border\", \"1px solid #ddd\", \"border-radius\", \"8px\", \"padding\", \"10px\", \"margin-bottom\", \"8px\"], [2, \"display\", \"flex\", \"justify-content\", \"space-between\", \"align-items\", \"center\", \"gap\", \"12px\", \"flex-wrap\", \"wrap\"], [2, \"font-weight\", \"600\"], [2, \"display\", \"flex\", \"gap\", \"8px\", \"align-items\", \"center\", \"flex-wrap\", \"wrap\", 3, \"formGroup\", \"ngSubmit\"], [\"formControlName\", \"reason\", \"placeholder\", \"Reason\", 2, \"padding\", \"8px\", \"font-size\", \"14px\", \"width\", \"180px\"], [\"formControlName\", \"notes\", \"placeholder\", \"Notes\", 2, \"padding\", \"8px\", \"font-size\", \"14px\", \"width\", \"220px\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\", \"btn-sm\", 3, \"disabled\"]],\n    template: function DoctorProfileComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"h2\", 0);\n        i0.ɵɵtext(1);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(2, \"div\", 1);\n        i0.ɵɵtext(3);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"div\", 2)(5, \"input\", 3);\n        i0.ɵɵlistener(\"ngModelChange\", function DoctorProfileComponent_Template_input_ngModelChange_5_listener($event) {\n          return ctx.date = $event;\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(6, \"button\", 4);\n        i0.ɵɵlistener(\"click\", function DoctorProfileComponent_Template_button_click_6_listener() {\n          return ctx.findSlots();\n        });\n        i0.ɵɵtext(7, \"Find slots\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(8, \"button\", 4);\n        i0.ɵɵlistener(\"click\", function DoctorProfileComponent_Template_button_click_8_listener() {\n          return ctx.loadAllAvailableSlots();\n        });\n        i0.ɵɵtext(9, \"All Available Slots\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵtemplate(10, DoctorProfileComponent_div_10_Template, 2, 0, \"div\", 5);\n        i0.ɵɵtemplate(11, DoctorProfileComponent_table_11_Template, 9, 1, \"table\", 6);\n        i0.ɵɵtemplate(12, DoctorProfileComponent_div_12_Template, 2, 0, \"div\", 5);\n        i0.ɵɵtemplate(13, DoctorProfileComponent_div_13_Template, 14, 11, \"div\", 7);\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(1);\n        i0.ɵɵtextInterpolate(ctx.doctor == null ? null : ctx.doctor.user == null ? null : ctx.doctor.user.name);\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate(ctx.doctor == null ? null : ctx.doctor.specialization);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngModel\", ctx.date);\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"ngIf\", ctx.loadingAll);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", !ctx.loadingAll && ctx.allSlots.length);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.slots.length === 0);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngForOf\", ctx.slots)(\"ngForTrackBy\", ctx.trackSlot);\n      }\n    },\n    dependencies: [i4.NgForOf, i4.NgIf, i3.ɵNgNoValidate, i3.DefaultValueAccessor, i3.NgControlStatus, i3.NgControlStatusGroup, i3.NgModel, i3.FormGroupDirective, i3.FormControlName, i4.DatePipe],\n    encapsulation: 2\n  });\n  return DoctorProfileComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}