{"ast":null,"code":"import { FormBuilder, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { ApiService } from '../services/api.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"../services/api.service\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"@angular/common\";\nfunction RegisterPatientComponent_div_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 16);\n    i0.ɵɵtext(1, \"Name can only contain letters and spaces.\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RegisterPatientComponent_div_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 16);\n    i0.ɵɵtext(1, \"Age must be 1\\u2013100.\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RegisterPatientComponent_div_13_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 16);\n    i0.ɵɵtext(1, \"Phone must be exactly 10 digits.\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RegisterPatientComponent_div_26_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 16);\n    i0.ɵɵtext(1, \"Email must be user.name@example.com with letters, numbers, and dots only.\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RegisterPatientComponent_div_29_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 16);\n    i0.ɵɵtext(1, \"Password is required.\");\n    i0.ɵɵelementEnd();\n  }\n}\nexport let RegisterPatientComponent = /*#__PURE__*/(() => {\n  class RegisterPatientComponent {\n    constructor(fb, api, router) {\n      this.fb = fb;\n      this.api = api;\n      this.router = router;\n      this.f = this.fb.group({\n        name: ['', [Validators.required, Validators.pattern(/^[A-Za-z\\s]+$/)]],\n        age: ['', [Validators.required, Validators.pattern(/^(?:[1-9]\\d?|100)$/)]],\n        phone: ['', [Validators.required, Validators.pattern(/^\\d{10}$/)]],\n        gender: [''],\n        email: ['', [Validators.required, Validators.pattern(/^(?!\\.)(?!.*\\.\\.)[A-Za-z0-9.]+(?<!\\.)@example\\.com$/)]],\n        password: ['', [Validators.required]]\n      });\n    }\n    submit() {\n      if (this.f.invalid) return;\n      const v = this.f.value;\n      const payload = {\n        ...v,\n        age: Number(v.age)\n      };\n      this.api.registerPatient(payload).subscribe(() => this.router.navigate(['/login']));\n    }\n  }\n  RegisterPatientComponent.ɵfac = function RegisterPatientComponent_Factory(t) {\n    return new (t || RegisterPatientComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.ApiService), i0.ɵɵdirectiveInject(i3.Router));\n  };\n  RegisterPatientComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: RegisterPatientComponent,\n    selectors: [[\"app-register-patient\"]],\n    decls: 32,\n    vars: 7,\n    consts: [[3, \"formGroup\", \"ngSubmit\"], [2, \"display\", \"flex\", \"gap\", \"12px\", \"margin-bottom\", \"12px\", \"flex-wrap\", \"wrap\"], [2, \"display\", \"flex\", \"flex-direction\", \"column\"], [\"formControlName\", \"name\", \"placeholder\", \"Name\", \"autocomplete\", \"name\", 2, \"padding\", \"10px 12px\", \"font-size\", \"14px\", \"width\", \"280px\"], [\"style\", \"color:#b00020; font-size:12px; margin-top:4px;\", 4, \"ngIf\"], [\"formControlName\", \"age\", \"type\", \"number\", \"min\", \"1\", \"max\", \"100\", \"placeholder\", \"Age\", 2, \"padding\", \"10px 12px\", \"font-size\", \"14px\", \"width\", \"280px\"], [\"formControlName\", \"phone\", \"type\", \"tel\", \"placeholder\", \"Phone\", \"inputmode\", \"numeric\", \"pattern\", \"\\\\d{10}\", 2, \"padding\", \"10px 12px\", \"font-size\", \"14px\", \"width\", \"280px\"], [\"formControlName\", \"gender\", 2, \"padding\", \"10px 12px\", \"font-size\", \"14px\", \"width\", \"280px\"], [\"value\", \"\"], [\"value\", \"MALE\"], [\"value\", \"FEMALE\"], [\"value\", \"OTHER\"], [2, \"display\", \"flex\", \"gap\", \"12px\", \"margin-bottom\", \"16px\", \"flex-wrap\", \"wrap\"], [\"formControlName\", \"email\", \"type\", \"email\", \"placeholder\", \"Email\", \"autocomplete\", \"email\", 2, \"padding\", \"10px 12px\", \"font-size\", \"14px\", \"width\", \"280px\"], [\"formControlName\", \"password\", \"type\", \"password\", \"placeholder\", \"Password\", \"autocomplete\", \"new-password\", 2, \"padding\", \"10px 12px\", \"font-size\", \"14px\", \"width\", \"280px\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\", 3, \"disabled\"], [2, \"color\", \"#b00020\", \"font-size\", \"12px\", \"margin-top\", \"4px\"]],\n    template: function RegisterPatientComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"h2\");\n        i0.ɵɵtext(1, \"Patient Register\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(2, \"form\", 0);\n        i0.ɵɵlistener(\"ngSubmit\", function RegisterPatientComponent_Template_form_ngSubmit_2_listener() {\n          return ctx.submit();\n        });\n        i0.ɵɵelementStart(3, \"div\", 1)(4, \"div\", 2);\n        i0.ɵɵelement(5, \"input\", 3);\n        i0.ɵɵtemplate(6, RegisterPatientComponent_div_6_Template, 2, 0, \"div\", 4);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(7, \"div\", 2);\n        i0.ɵɵelement(8, \"input\", 5);\n        i0.ɵɵtemplate(9, RegisterPatientComponent_div_9_Template, 2, 0, \"div\", 4);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(10, \"div\", 1)(11, \"div\", 2);\n        i0.ɵɵelement(12, \"input\", 6);\n        i0.ɵɵtemplate(13, RegisterPatientComponent_div_13_Template, 2, 0, \"div\", 4);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(14, \"select\", 7)(15, \"option\", 8);\n        i0.ɵɵtext(16, \"Select Gender\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(17, \"option\", 9);\n        i0.ɵɵtext(18, \"Male\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(19, \"option\", 10);\n        i0.ɵɵtext(20, \"Female\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(21, \"option\", 11);\n        i0.ɵɵtext(22, \"Other\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(23, \"div\", 12)(24, \"div\", 2);\n        i0.ɵɵelement(25, \"input\", 13);\n        i0.ɵɵtemplate(26, RegisterPatientComponent_div_26_Template, 2, 0, \"div\", 4);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(27, \"div\", 2);\n        i0.ɵɵelement(28, \"input\", 14);\n        i0.ɵɵtemplate(29, RegisterPatientComponent_div_29_Template, 2, 0, \"div\", 4);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(30, \"button\", 15);\n        i0.ɵɵtext(31, \"Register\");\n        i0.ɵɵelementEnd()();\n      }\n      if (rf & 2) {\n        let tmp_1_0;\n        let tmp_2_0;\n        let tmp_3_0;\n        let tmp_4_0;\n        let tmp_5_0;\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"formGroup\", ctx.f);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngIf\", ((tmp_1_0 = ctx.f.get(\"name\")) == null ? null : tmp_1_0.touched) && ((tmp_1_0 = ctx.f.get(\"name\")) == null ? null : tmp_1_0.invalid));\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngIf\", ((tmp_2_0 = ctx.f.get(\"age\")) == null ? null : tmp_2_0.touched) && ((tmp_2_0 = ctx.f.get(\"age\")) == null ? null : tmp_2_0.invalid));\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngIf\", ((tmp_3_0 = ctx.f.get(\"phone\")) == null ? null : tmp_3_0.touched) && ((tmp_3_0 = ctx.f.get(\"phone\")) == null ? null : tmp_3_0.invalid));\n        i0.ɵɵadvance(13);\n        i0.ɵɵproperty(\"ngIf\", ((tmp_4_0 = ctx.f.get(\"email\")) == null ? null : tmp_4_0.touched) && ((tmp_4_0 = ctx.f.get(\"email\")) == null ? null : tmp_4_0.invalid));\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngIf\", ((tmp_5_0 = ctx.f.get(\"password\")) == null ? null : tmp_5_0.touched) && ((tmp_5_0 = ctx.f.get(\"password\")) == null ? null : tmp_5_0.invalid));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"disabled\", ctx.f.invalid || ctx.f.pending);\n      }\n    },\n    dependencies: [i4.NgIf, i1.ɵNgNoValidate, i1.NgSelectOption, i1.ɵNgSelectMultipleOption, i1.DefaultValueAccessor, i1.NumberValueAccessor, i1.SelectControlValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.PatternValidator, i1.MinValidator, i1.MaxValidator, i1.FormGroupDirective, i1.FormControlName],\n    encapsulation: 2\n  });\n  return RegisterPatientComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}