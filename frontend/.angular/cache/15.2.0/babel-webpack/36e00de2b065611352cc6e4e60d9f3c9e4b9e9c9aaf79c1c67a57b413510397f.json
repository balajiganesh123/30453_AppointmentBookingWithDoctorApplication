{"ast":null,"code":"import { ActivatedRoute } from '@angular/router';\nimport { FormBuilder } from '@angular/forms';\nimport { ApiService } from '../services/api.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"../services/api.service\";\nimport * as i3 from \"@angular/forms\";\nimport * as i4 from \"@angular/common\";\nfunction DoctorProfileComponent_div_13_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\");\n    i0.ɵɵtext(2);\n    i0.ɵɵpipe(3, \"date\");\n    i0.ɵɵpipe(4, \"date\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"form\", 6);\n    i0.ɵɵelement(6, \"input\", 7)(7, \"input\", 8);\n    i0.ɵɵelementStart(8, \"button\", 9);\n    i0.ɵɵlistener(\"click\", function DoctorProfileComponent_div_13_Template_button_click_8_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r3);\n      const s_r1 = restoredCtx.$implicit;\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.book(s_r1));\n    });\n    i0.ɵɵtext(9, \" Book \");\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const s_r1 = ctx.$implicit;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate2(\"\", i0.ɵɵpipeBind2(3, 4, s_r1.startUtc, \"short\"), \" to \", i0.ɵɵpipeBind2(4, 7, s_r1.endUtc, \"short\"), \"\");\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"formGroup\", ctx_r0.fgs[s_r1.startUtc]);\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"disabled\", ctx_r0.submitting[s_r1.startUtc]);\n  }\n}\nexport let DoctorProfileComponent = /*#__PURE__*/(() => {\n  class DoctorProfileComponent {\n    constructor(route, api, fb) {\n      this.route = route;\n      this.api = api;\n      this.fb = fb;\n      this.date = new Date().toISOString().slice(0, 10);\n      this.slots = [];\n      this.fgs = {};\n      this.doctorId = 0;\n      this.submitting = {};\n    }\n    ngOnInit() {\n      this.doctorId = Number(this.route.snapshot.paramMap.get('id'));\n      this.api.getDoctor(this.doctorId).subscribe(d => this.doctor = d);\n      this.findSlots();\n    }\n    trackSlot(i, s) {\n      return s.startUtc;\n    }\n    extractUserId() {\n      const raw = localStorage.getItem('user');\n      if (!raw) return null;\n      let u;\n      try {\n        u = JSON.parse(raw);\n      } catch {\n        return null;\n      }\n      const tryVals = [u?.id, u?.user?.id, u?.userId, u?.uid, u?.payload?.id, u?.data?.id];\n      for (const v of tryVals) {\n        if (typeof v === 'number' && Number.isFinite(v)) return v;\n        if (typeof v === 'string' && v.trim() && !Number.isNaN(Number(v))) return Number(v);\n      }\n      const fallbackKeys = ['userId', 'uid', 'patientId', 'id'];\n      for (const k of fallbackKeys) {\n        const s = localStorage.getItem(k);\n        if (s && !Number.isNaN(Number(s))) return Number(s);\n      }\n      return null;\n    }\n    findSlots() {\n      this.api.getSlots(this.doctorId, this.date).subscribe(arr => {\n        this.slots = arr;\n        const keep = new Set(arr.map(s => s.startUtc));\n        for (const s of arr) {\n          const k = s.startUtc;\n          if (!this.fgs[k]) this.fgs[k] = this.fb.group({\n            reason: [''],\n            notes: ['']\n          });\n        }\n        for (const k of Object.keys(this.fgs)) {\n          if (!keep.has(k)) delete this.fgs[k];\n        }\n      });\n    }\n    book(s) {\n      const patientId = this.extractUserId();\n      if (!patientId) {\n        alert('Please log in again.');\n        return;\n      }\n      const fg = this.fgs[s.startUtc];\n      if (!fg) {\n        this.findSlots();\n        return;\n      }\n      const payload = {\n        doctorId: this.doctorId,\n        patientId: patientId,\n        startUtc: s.startUtc,\n        reason: fg.value.reason || '',\n        notes: fg.value.notes || ''\n      };\n      this.submitting[s.startUtc] = true;\n      this.api.createAppointment(payload).subscribe({\n        next: () => {\n          fg.reset();\n          this.findSlots();\n          this.submitting[s.startUtc] = false;\n          alert('Appointment requested.');\n        },\n        error: () => {\n          this.findSlots();\n          this.submitting[s.startUtc] = false;\n          alert('That slot is no longer available.');\n        }\n      });\n    }\n  }\n  DoctorProfileComponent.ɵfac = function DoctorProfileComponent_Factory(t) {\n    return new (t || DoctorProfileComponent)(i0.ɵɵdirectiveInject(i1.ActivatedRoute), i0.ɵɵdirectiveInject(i2.ApiService), i0.ɵɵdirectiveInject(i3.FormBuilder));\n  };\n  DoctorProfileComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: DoctorProfileComponent,\n    selectors: [[\"app-doctor-profile\"]],\n    decls: 14,\n    vars: 8,\n    consts: [[1, \"card\"], [1, \"filters\"], [\"type\", \"date\", 3, \"ngModel\", \"ngModelChange\"], [\"type\", \"button\", 1, \"btn\", \"btn-secondary\", 3, \"click\"], [1, \"grid\"], [\"class\", \"card\", 4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [3, \"formGroup\"], [\"placeholder\", \"Reason\", \"formControlName\", \"reason\"], [\"placeholder\", \"Notes\", \"formControlName\", \"notes\"], [\"type\", \"button\", 1, \"btn\", \"btn-primary\", \"btn-sm\", 3, \"disabled\", \"click\"]],\n    template: function DoctorProfileComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\")(2, \"strong\");\n        i0.ɵɵtext(3);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(4, \"div\");\n        i0.ɵɵtext(5);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(6, \"div\");\n        i0.ɵɵtext(7);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(8, \"div\", 1)(9, \"input\", 2);\n        i0.ɵɵlistener(\"ngModelChange\", function DoctorProfileComponent_Template_input_ngModelChange_9_listener($event) {\n          return ctx.date = $event;\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(10, \"button\", 3);\n        i0.ɵɵlistener(\"click\", function DoctorProfileComponent_Template_button_click_10_listener() {\n          return ctx.findSlots();\n        });\n        i0.ɵɵtext(11, \"Find Slots\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(12, \"div\", 4);\n        i0.ɵɵtemplate(13, DoctorProfileComponent_div_13_Template, 10, 10, \"div\", 5);\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(3);\n        i0.ɵɵtextInterpolate(ctx.doctor == null ? null : ctx.doctor.user == null ? null : ctx.doctor.user.name);\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate2(\"\", ctx.doctor == null ? null : ctx.doctor.specialization, \" \\u2022 \", ctx.doctor == null ? null : ctx.doctor.experienceYears, \" years\");\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate2(\"\", ctx.doctor == null ? null : ctx.doctor.city, \" \\u2022 \", ctx.doctor == null ? null : ctx.doctor.clinicLocation, \"\");\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngModel\", ctx.date);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngForOf\", ctx.slots)(\"ngForTrackBy\", ctx.trackSlot);\n      }\n    },\n    dependencies: [i4.NgForOf, i3.ɵNgNoValidate, i3.DefaultValueAccessor, i3.NgControlStatus, i3.NgControlStatusGroup, i3.NgModel, i3.FormGroupDirective, i3.FormControlName, i4.DatePipe],\n    encapsulation: 2\n  });\n  return DoctorProfileComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}