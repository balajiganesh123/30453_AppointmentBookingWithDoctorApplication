{"ast":null,"code":"import { ActivatedRoute, Router } from '@angular/router';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { ApiService } from '../services/api.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"../services/api.service\";\nimport * as i3 from \"@angular/forms\";\nimport * as i4 from \"@angular/common\";\nfunction DoctorDashboardComponent_ng_container_16_div_6_button_9_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r7 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 9);\n    i0.ɵɵlistener(\"click\", function DoctorDashboardComponent_ng_container_16_div_6_button_9_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r7);\n      const a_r3 = i0.ɵɵnextContext().$implicit;\n      const ctx_r5 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r5.accept(a_r3));\n    });\n    i0.ɵɵtext(1, \"Accept\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction DoctorDashboardComponent_ng_container_16_div_6_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r9 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 5)(1, \"div\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"div\");\n    i0.ɵɵtext(4);\n    i0.ɵɵpipe(5, \"date\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"div\");\n    i0.ɵɵtext(7);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(8, \"div\", 6);\n    i0.ɵɵtemplate(9, DoctorDashboardComponent_ng_container_16_div_6_button_9_Template, 2, 0, \"button\", 7);\n    i0.ɵɵelementStart(10, \"button\", 8);\n    i0.ɵɵlistener(\"click\", function DoctorDashboardComponent_ng_container_16_div_6_Template_button_click_10_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r9);\n      const a_r3 = restoredCtx.$implicit;\n      const ctx_r8 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r8.status(a_r3, \"CHECKED_IN\"));\n    });\n    i0.ɵɵtext(11, \"Checked In\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(12, \"button\", 8);\n    i0.ɵɵlistener(\"click\", function DoctorDashboardComponent_ng_container_16_div_6_Template_button_click_12_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r9);\n      const a_r3 = restoredCtx.$implicit;\n      const ctx_r10 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r10.status(a_r3, \"IN_PROGRESS\"));\n    });\n    i0.ɵɵtext(13, \"In Progress\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(14, \"button\", 8);\n    i0.ɵɵlistener(\"click\", function DoctorDashboardComponent_ng_container_16_div_6_Template_button_click_14_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r9);\n      const a_r3 = restoredCtx.$implicit;\n      const ctx_r11 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r11.status(a_r3, \"COMPLETED\"));\n    });\n    i0.ɵɵtext(15, \"Completed\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(16, \"button\", 8);\n    i0.ɵɵlistener(\"click\", function DoctorDashboardComponent_ng_container_16_div_6_Template_button_click_16_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r9);\n      const a_r3 = restoredCtx.$implicit;\n      const ctx_r12 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r12.status(a_r3, \"NO_SHOW\"));\n    });\n    i0.ɵɵtext(17, \"No Show\");\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const a_r3 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"Patient \", a_r3.patient.user.name, \"\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind2(5, 4, a_r3.startTime, \"dd-MM-yyyy, HH:mm\"));\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(a_r3.status);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", a_r3.status === \"PENDING\");\n  }\n}\nfunction DoctorDashboardComponent_ng_container_16_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r14 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"div\")(2, \"button\", 2);\n    i0.ɵɵlistener(\"click\", function DoctorDashboardComponent_ng_container_16_Template_button_click_2_listener() {\n      i0.ɵɵrestoreView(_r14);\n      const ctx_r13 = i0.ɵɵnextContext();\n      ctx_r13.showAll = false;\n      return i0.ɵɵresetView(ctx_r13.load());\n    });\n    i0.ɵɵtext(3, \"Show upcoming\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"button\", 2);\n    i0.ɵɵlistener(\"click\", function DoctorDashboardComponent_ng_container_16_Template_button_click_4_listener() {\n      i0.ɵɵrestoreView(_r14);\n      const ctx_r15 = i0.ɵɵnextContext();\n      ctx_r15.showAll = true;\n      return i0.ɵɵresetView(ctx_r15.load());\n    });\n    i0.ɵɵtext(5, \"Show all\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵtemplate(6, DoctorDashboardComponent_ng_container_16_div_6_Template, 18, 7, \"div\", 4);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(6);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r0.items);\n  }\n}\nfunction DoctorDashboardComponent_ng_container_17_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 5);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r16 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r16.success);\n  }\n}\nfunction DoctorDashboardComponent_ng_container_17_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 5);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r17 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r17.error);\n  }\n}\nfunction DoctorDashboardComponent_ng_container_17_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r19 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"h3\");\n    i0.ɵɵtext(2, \"Add Schedule\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(3, DoctorDashboardComponent_ng_container_17_div_3_Template, 2, 1, \"div\", 10);\n    i0.ɵɵtemplate(4, DoctorDashboardComponent_ng_container_17_div_4_Template, 2, 1, \"div\", 10);\n    i0.ɵɵelementStart(5, \"form\", 11);\n    i0.ɵɵlistener(\"ngSubmit\", function DoctorDashboardComponent_ng_container_17_Template_form_ngSubmit_5_listener() {\n      i0.ɵɵrestoreView(_r19);\n      const ctx_r18 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r18.addSchedule());\n    });\n    i0.ɵɵelement(6, \"input\", 12)(7, \"input\", 13)(8, \"input\", 14);\n    i0.ɵɵelementStart(9, \"button\", 15);\n    i0.ɵɵtext(10, \"Add\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.success);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.error);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"formGroup\", ctx_r1.f);\n    i0.ɵɵadvance(1);\n    i0.ɵɵattribute(\"min\", ctx_r1.todayStr);\n    i0.ɵɵadvance(1);\n    i0.ɵɵattribute(\"min\", ctx_r1.timeMin);\n    i0.ɵɵadvance(1);\n    i0.ɵɵattribute(\"min\", ctx_r1.timeMin);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"disabled\", ctx_r1.loading || ctx_r1.f.invalid);\n  }\n}\nexport let DoctorDashboardComponent = /*#__PURE__*/(() => {\n  class DoctorDashboardComponent {\n    constructor(route, api, fb, router) {\n      this.route = route;\n      this.api = api;\n      this.fb = fb;\n      this.router = router;\n      this.userId = 0;\n      this.doctorId = 0;\n      this.items = [];\n      this.showAll = false;\n      this.success = '';\n      this.error = '';\n      this.loading = false;\n      this.activeTab = 'appointments';\n      this.f = this.fb.group({\n        date: ['', Validators.required],\n        start: ['', Validators.required],\n        end: ['', Validators.required]\n      });\n      this.todayStr = this.toDateStr(new Date());\n      this.timeMin = null;\n      this.pastSelection = false;\n      this.invalidRange = false;\n    }\n    ngOnInit() {\n      this.userId = Number(this.route.snapshot.paramMap.get('id'));\n      this.api.getDoctorByUser(this.userId).subscribe(d => {\n        this.doctor = d;\n        this.doctorId = d.id;\n      });\n      this.f.get('date')?.valueChanges.subscribe(() => {\n        this.updateTimeMin();\n        this.updateValidityFlags();\n      });\n      this.f.get('start')?.valueChanges.subscribe(() => this.updateValidityFlags());\n      this.f.get('end')?.valueChanges.subscribe(() => this.updateValidityFlags());\n      this.updateTimeMin();\n      this.updateValidityFlags();\n      this.load();\n    }\n    load() {\n      if (this.showAll) this.api.doctorAllByUser(this.userId).subscribe(d => this.items = d);else this.api.doctorUpcomingByUser(this.userId).subscribe(d => this.items = d);\n    }\n    addSchedule() {\n      if (this.f.invalid || !this.doctorId) return;\n      this.updateValidityFlags();\n      if (this.pastSelection) {\n        this.error = 'Cannot add availability in the past';\n        return;\n      }\n      if (this.invalidRange) {\n        this.error = 'Start time must be earlier than end time';\n        return;\n      }\n      this.success = '';\n      this.error = '';\n      this.loading = true;\n      const body = {\n        date: this.f.value.date,\n        start: this.f.value.start,\n        end: this.f.value.end,\n        slotMinutes: 15\n      };\n      this.api.addSchedule(this.doctorId, body).subscribe({\n        next: () => {\n          this.success = 'Slot added successfully';\n          this.loading = false;\n          this.load();\n        },\n        error: () => {\n          this.error = 'Failed to add slot';\n          this.loading = false;\n        }\n      });\n    }\n    accept(a) {\n      this.api.acceptAppointment(a.id).subscribe(() => this.load());\n    }\n    status(a, s) {\n      this.api.updateStatus(a.id, s).subscribe(() => this.load());\n    }\n    logout() {\n      localStorage.removeItem('user');\n      this.router.navigate(['/']);\n    }\n    toDateStr(d) {\n      const y = d.getFullYear();\n      const m = String(d.getMonth() + 1).padStart(2, '0');\n      const dd = String(d.getDate()).padStart(2, '0');\n      return `${y}-${m}-${dd}`;\n    }\n    nowHm() {\n      const n = new Date();\n      const h = String(n.getHours()).padStart(2, '0');\n      const m = String(n.getMinutes()).padStart(2, '0');\n      return `${h}:${m}`;\n    }\n    updateTimeMin() {\n      const d = this.f.value.date || '';\n      this.timeMin = d === this.todayStr ? this.nowHm() : null;\n    }\n    updateValidityFlags() {\n      this.pastSelection = this.isPastSelection();\n      this.invalidRange = this.isInvalidRange();\n    }\n    isPastSelection() {\n      const d = this.f.value.date;\n      const s = this.f.value.start;\n      if (!d || !s) return false;\n      const start = new Date(`${d}T${s}:00`);\n      const now = new Date();\n      if (this.toDateStr(start) < this.todayStr) return true;\n      if (this.toDateStr(start) === this.todayStr && start.getTime() < now.getTime()) return true;\n      return false;\n    }\n    isInvalidRange() {\n      const s = this.f.value.start;\n      const e = this.f.value.end;\n      if (!s || !e) return false;\n      const [sh, sm] = s.split(':').map(Number);\n      const [eh, em] = e.split(':').map(Number);\n      const startMin = sh * 60 + sm;\n      const endMin = eh * 60 + em;\n      return startMin >= endMin;\n    }\n  }\n  DoctorDashboardComponent.ɵfac = function DoctorDashboardComponent_Factory(t) {\n    return new (t || DoctorDashboardComponent)(i0.ɵɵdirectiveInject(i1.ActivatedRoute), i0.ɵɵdirectiveInject(i2.ApiService), i0.ɵɵdirectiveInject(i3.FormBuilder), i0.ɵɵdirectiveInject(i1.Router));\n  };\n  DoctorDashboardComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: DoctorDashboardComponent,\n    selectors: [[\"app-doctor-dashboard\"]],\n    decls: 18,\n    vars: 4,\n    consts: [[2, \"display\", \"grid\", \"grid-template-columns\", \"140px 1fr\", \"column-gap\", \"12px\", \"row-gap\", \"8px\", \"margin-bottom\", \"16px\"], [2, \"display\", \"flex\", \"gap\", \"8px\", \"margin-bottom\", \"16px\"], [\"type\", \"button\", 1, \"btn\", \"btn-outline\", \"btn-sm\", 3, \"click\"], [4, \"ngIf\"], [\"class\", \"card\", 4, \"ngFor\", \"ngForOf\"], [1, \"card\"], [2, \"margin-top\", \"8px\"], [\"type\", \"button\", \"class\", \"btn btn-primary btn-sm\", 3, \"click\", 4, \"ngIf\"], [\"type\", \"button\", 1, \"btn\", \"btn-secondary\", \"btn-sm\", 3, \"click\"], [\"type\", \"button\", 1, \"btn\", \"btn-primary\", \"btn-sm\", 3, \"click\"], [\"class\", \"card\", 4, \"ngIf\"], [3, \"formGroup\", \"ngSubmit\"], [\"type\", \"date\", \"formControlName\", \"date\"], [\"type\", \"time\", \"formControlName\", \"start\"], [\"type\", \"time\", \"formControlName\", \"end\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\", 3, \"disabled\"]],\n    template: function DoctorDashboardComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"h2\");\n        i0.ɵɵtext(1, \"Doctor Dashboard\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(2, \"div\", 0)(3, \"div\");\n        i0.ɵɵtext(4, \"Doctor Name\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(5, \"div\");\n        i0.ɵɵtext(6);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(7, \"div\");\n        i0.ɵɵtext(8, \"Specialization\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(9, \"div\");\n        i0.ɵɵtext(10);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(11, \"div\", 1)(12, \"button\", 2);\n        i0.ɵɵlistener(\"click\", function DoctorDashboardComponent_Template_button_click_12_listener() {\n          return ctx.activeTab = \"appointments\";\n        });\n        i0.ɵɵtext(13, \"Appointments\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(14, \"button\", 2);\n        i0.ɵɵlistener(\"click\", function DoctorDashboardComponent_Template_button_click_14_listener() {\n          return ctx.activeTab = \"schedule\";\n        });\n        i0.ɵɵtext(15, \"Add Schedule\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵtemplate(16, DoctorDashboardComponent_ng_container_16_Template, 7, 1, \"ng-container\", 3);\n        i0.ɵɵtemplate(17, DoctorDashboardComponent_ng_container_17_Template, 11, 7, \"ng-container\", 3);\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(6);\n        i0.ɵɵtextInterpolate1(\": \", ctx.doctor == null ? null : ctx.doctor.user == null ? null : ctx.doctor.user.name, \"\");\n        i0.ɵɵadvance(4);\n        i0.ɵɵtextInterpolate1(\": \", ctx.doctor == null ? null : ctx.doctor.specialization, \"\");\n        i0.ɵɵadvance(6);\n        i0.ɵɵproperty(\"ngIf\", ctx.activeTab === \"appointments\");\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.activeTab === \"schedule\");\n      }\n    },\n    dependencies: [i4.NgForOf, i4.NgIf, i3.ɵNgNoValidate, i3.DefaultValueAccessor, i3.NgControlStatus, i3.NgControlStatusGroup, i3.FormGroupDirective, i3.FormControlName, i4.DatePipe],\n    encapsulation: 2\n  });\n  return DoctorDashboardComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}