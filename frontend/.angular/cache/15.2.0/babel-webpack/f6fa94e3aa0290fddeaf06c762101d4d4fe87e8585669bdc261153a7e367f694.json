{"ast":null,"code":"import { __decorate, __metadata } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { ApiService } from '../services/api.service';\nlet DoctorDashboardComponent = class DoctorDashboardComponent {\n  constructor(route, api, fb, router) {\n    this.route = route;\n    this.api = api;\n    this.fb = fb;\n    this.router = router;\n    this.userId = 0;\n    this.doctorId = 0;\n    this.items = [];\n    this.showAll = false;\n    this.success = '';\n    this.error = '';\n    this.loading = false;\n    this.activeTab = 'appointments';\n    this.f = this.fb.group({\n      date: ['', Validators.required],\n      start: ['', Validators.required],\n      end: ['', Validators.required]\n    });\n    this.todayStr = this.toDateStr(new Date());\n    this.timeMin = null;\n    this.pastSelection = false;\n    this.invalidRange = false;\n  }\n  ngOnInit() {\n    this.userId = Number(this.route.snapshot.paramMap.get('id'));\n    this.api.getDoctorByUser(this.userId).subscribe(d => {\n      this.doctor = d;\n      this.doctorId = d.id;\n    });\n    this.f.get('date')?.valueChanges.subscribe(() => {\n      this.updateTimeMin();\n      this.updateValidityFlags();\n    });\n    this.f.get('start')?.valueChanges.subscribe(() => this.updateValidityFlags());\n    this.f.get('end')?.valueChanges.subscribe(() => this.updateValidityFlags());\n    this.updateTimeMin();\n    this.updateValidityFlags();\n    this.load();\n  }\n  load() {\n    if (this.showAll) this.api.doctorAllByUser(this.userId).subscribe(d => this.items = d);else this.api.doctorUpcomingByUser(this.userId).subscribe(d => this.items = d);\n  }\n  addSchedule() {\n    if (this.f.invalid || !this.doctorId) return;\n    this.updateValidityFlags();\n    if (this.pastSelection) {\n      this.error = 'Cannot add availability in the past';\n      return;\n    }\n    if (this.invalidRange) {\n      this.error = 'Start time must be earlier than end time';\n      return;\n    }\n    this.success = '';\n    this.error = '';\n    this.loading = true;\n    const body = {\n      date: this.f.value.date,\n      start: this.f.value.start,\n      end: this.f.value.end,\n      slotMinutes: 15\n    };\n    this.api.addSchedule(this.doctorId, body).subscribe({\n      next: () => {\n        this.success = 'Slot added successfully';\n        this.loading = false;\n        this.load();\n      },\n      error: () => {\n        this.error = 'Failed to add slot';\n        this.loading = false;\n      }\n    });\n  }\n  accept(a) {\n    if (!window.confirm('Are you sure you want to accept the appointment? This is irreversible.')) return;\n    this.api.acceptAppointment(a.id).subscribe({\n      next: () => {\n        a.status = 'CONFIRMED';\n      },\n      error: () => {}\n    });\n  }\n  logout() {\n    localStorage.removeItem('user');\n    this.router.navigate(['/']);\n  }\n  toDateStr(d) {\n    const y = d.getFullYear();\n    const m = String(d.getMonth() + 1).padStart(2, '0');\n    const dd = String(d.getDate()).padStart(2, '0');\n    return `${y}-${m}-${dd}`;\n  }\n  nowHm() {\n    const n = new Date();\n    const h = String(n.getHours()).padStart(2, '0');\n    const m = String(n.getMinutes()).padStart(2, '0');\n    return `${h}:${m}`;\n  }\n  updateTimeMin() {\n    const d = this.f.value.date || '';\n    this.timeMin = d === this.todayStr ? this.nowHm() : null;\n  }\n  updateValidityFlags() {\n    this.pastSelection = this.isPastSelection();\n    this.invalidRange = this.isInvalidRange();\n  }\n  isPastSelection() {\n    const d = this.f.value.date;\n    const s = this.f.value.start;\n    if (!d || !s) return false;\n    const start = new Date(`${d}T${s}:00`);\n    const now = new Date();\n    if (this.toDateStr(start) < this.todayStr) return true;\n    if (this.toDateStr(start) === this.todayStr && start.getTime() < now.getTime()) return true;\n    return false;\n  }\n  isInvalidRange() {\n    const s = this.f.value.start;\n    const e = this.f.value.end;\n    if (!s || !e) return false;\n    const [sh, sm] = s.split(':').map(Number);\n    const [eh, em] = e.split(':').map(Number);\n    const startMin = sh * 60 + sm;\n    const endMin = eh * 60 + em;\n    return startMin >= endMin;\n  }\n};\nDoctorDashboardComponent = __decorate([Component({\n  selector: 'app-doctor-dashboard',\n  templateUrl: './doctor-dashboard.component.html'\n}), __metadata(\"design:paramtypes\", [ActivatedRoute, ApiService, FormBuilder, Router])], DoctorDashboardComponent);\nexport { DoctorDashboardComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}